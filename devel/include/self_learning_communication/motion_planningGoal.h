// Generated by gencpp from file self_learning_communication/motion_planningGoal.msg
// DO NOT EDIT!


#ifndef SELF_LEARNING_COMMUNICATION_MESSAGE_MOTION_PLANNINGGOAL_H
#define SELF_LEARNING_COMMUNICATION_MESSAGE_MOTION_PLANNINGGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace self_learning_communication
{
template <class ContainerAllocator>
struct motion_planningGoal_
{
  typedef motion_planningGoal_<ContainerAllocator> Type;

  motion_planningGoal_()
    : final()  {
    }
  motion_planningGoal_(const ContainerAllocator& _alloc)
    : final(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _final_type;
  _final_type final;





  typedef boost::shared_ptr< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> const> ConstPtr;

}; // struct motion_planningGoal_

typedef ::self_learning_communication::motion_planningGoal_<std::allocator<void> > motion_planningGoal;

typedef boost::shared_ptr< ::self_learning_communication::motion_planningGoal > motion_planningGoalPtr;
typedef boost::shared_ptr< ::self_learning_communication::motion_planningGoal const> motion_planningGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::self_learning_communication::motion_planningGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace self_learning_communication

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'self_learning_communication': ['/home/xiaoc/xiaoc/code/ros_practice/src/self_learning_communication/msg', '/home/xiaoc/xiaoc/code/ros_practice/devel/share/self_learning_communication/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96b55ae3c29c08040f01a834ea1b83ab";
  }

  static const char* value(const ::self_learning_communication::motion_planningGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96b55ae3c29c0804ULL;
  static const uint64_t static_value2 = 0x0f01a834ea1b83abULL;
};

template<class ContainerAllocator>
struct DataType< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "self_learning_communication/motion_planningGoal";
  }

  static const char* value(const ::self_learning_communication::motion_planningGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# 定义目标点\n\
geometry_msgs/Vector3 final\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::self_learning_communication::motion_planningGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.final);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_planningGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::self_learning_communication::motion_planningGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::self_learning_communication::motion_planningGoal_<ContainerAllocator>& v)
  {
    s << indent << "final: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.final);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SELF_LEARNING_COMMUNICATION_MESSAGE_MOTION_PLANNINGGOAL_H
